#!/usr/bin/env node
var io = require('socket.io');
var mongoose = require('mongoose');
var Chat = require('../models/Chat.js');

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myChatApp:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var message = [];
var people = [];
var ids = [];
var h = 0;

io = io.listen(server);
io.on('connection', function(socket){
  console.log('User connected. Socket id %s', socket.id);
  socket.emit('chat message', message);
  socket.emit('people', people);
  socket.emit('ids', ids);
  socket.emit('height', h);
  ids.push(socket.id);

  socket.on('disconnect', function(){
    //console.log('User disconnected. Socket id %s', socket.id);
    for(i = 0; i < ids.length; i++) {
      if(ids[i] == socket.id && ids.length == people.length) {
        ids.splice(i, 1);
        var ann = {name: "Announcement", chat : "     " + people[i] + " has left the chat, we'll miss him/her"}
        ann = new Chat(ann);
        ann.save(function(err, ann) {
          if (err) return console.error(err);
        });
        io.sockets.emit ('user_disconnect', ann);
        people.splice(i, 1);
        io.emit('people', people);
      }
    }
  });

  socket.on('chat message', function(msg){
    message = msg;
    io.emit('chat message', message);
  });

  socket.on('people', function(ppl) {
    people = ppl;
    //console.log(ppl);
    io.emit('people', people);
  });

  socket.on('ids', function(id) {
    ids = id;
    io.emit('ids', ids);
  });

  socket.on('height', function(height) {
    h = height;
    io.emit('height', height);
  });

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
